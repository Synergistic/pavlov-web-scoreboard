{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","undefined","serverInfo","setServerInfo","playerList","setPlayerList","loading","setLoading","useEffect","fetchServerData","fetch","then","res","json","data","className","Container","Fragment","Header","as","Table","celled","Row","HeaderCell","Body","map","p","player","kda","split","Cell","Button","primary","onClick","Dimmer","active","Loader","inverted","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA+EeA,MA1Ef,WAAgB,IAAD,EACuBC,wBAASC,GADhC,mBACNC,EADM,KACMC,EADN,OAEuBH,wBAASC,GAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGiBL,oBAAS,GAH1B,mBAGNM,EAHM,KAGGC,EAHH,KAMbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAkB,WACtBF,GAAW,GACXG,MAAM,eAAeC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACpCF,MAAK,SAAAG,GACJX,EAAcW,EAAI,YAClBT,EAAcS,EAAI,QAClBP,GAAW,OAmBf,OACE,qBAAKQ,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,WACCd,IAAeI,GAChB,eAAC,IAAMW,SAAP,WACE,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAX,SAAiBjB,EAAU,aAC3B,sCAASA,EAAU,YACnB,uCAAUA,EAAU,YACpB,0CAAaA,EAAU,eACtBE,GACC,eAACgB,EAAA,EAAD,CAAOC,QAAM,EAAb,UACE,cAACD,EAAA,EAAMF,OAAP,UACE,eAACE,EAAA,EAAME,IAAP,WACE,cAACF,EAAA,EAAMG,WAAP,qBACA,cAACH,EAAA,EAAMG,WAAP,oBACA,cAACH,EAAA,EAAMG,WAAP,qBACA,cAACH,EAAA,EAAMG,WAAP,yBAGJ,cAACH,EAAA,EAAMI,KAAP,UAjCDpB,EAAWqB,KAAI,SAAAC,GACpB,IAAIC,EAASD,EAAC,WACVE,EAAMD,EAAM,IAAQE,MAAM,KAC9B,OACE,eAACT,EAAA,EAAME,IAAP,WACA,cAACF,EAAA,EAAMU,KAAP,UAAaH,EAAM,aACnB,cAACP,EAAA,EAAMU,KAAP,UAAaF,EAAI,KACjB,cAACR,EAAA,EAAMU,KAAP,UAAaF,EAAI,KACjB,cAACR,EAAA,EAAMU,KAAP,UAAaF,EAAI,gBA6Bf,cAACG,EAAA,EAAD,CAAQC,SAAO,EAACC,QAAS,kBAAMxB,KAA/B,wBAIHH,GACC,cAAC4B,EAAA,EAAD,CAAQC,QAAM,EAAd,SACA,cAACC,EAAA,EAAD,CAAQC,UAAQ,EAAhB,6BCzDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.1770e6c7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Header, Table, Container, Button, Dimmer, Loader } from 'semantic-ui-react'\n\nfunction App() {\n  const [serverInfo, setServerInfo] = useState(undefined);\n  const [playerList, setPlayerList] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n\n\n  useEffect(() => {\n    fetchServerData();\n  }, []);\n\n  const fetchServerData = () => {\n    setLoading(true);\n    fetch('/api/server').then(res => res.json())\n    .then(data => {\n      setServerInfo(data[\"ServerInfo\"]);\n      setPlayerList(data[\"Scores\"]);\n      setLoading(false);\n    });\n  }\n\n  const renderPlayerRows = () => {\n    return playerList.map(p => {\n      let player = p[\"PlayerInfo\"];\n      let kda = player[\"KDA\"].split(\"/\");\n      return (\n        <Table.Row>\n        <Table.Cell>{player[\"PlayerName\"]}</Table.Cell>\n        <Table.Cell>{kda[0]}</Table.Cell>\n        <Table.Cell>{kda[1]}</Table.Cell>\n        <Table.Cell>{kda[2]}</Table.Cell>\n      </Table.Row>\n      )\n    })\n  }\n  \n  return (\n    <div className=\"App\">\n      <Container>\n      {serverInfo && !loading &&\n      <React.Fragment>\n        <Header as='h2'>{serverInfo[\"ServerName\"]}</Header>\n        <p>Map: {serverInfo[\"MapLabel\"]}</p>\n        <p>Mode: {serverInfo[\"GameMode\"]}</p>\n        <p>Players: {serverInfo[\"PlayerCount\"]}</p>\n        {playerList && \n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Player</Table.HeaderCell>\n                <Table.HeaderCell>Kills</Table.HeaderCell>\n                <Table.HeaderCell>Deaths</Table.HeaderCell>\n                <Table.HeaderCell>Score</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {renderPlayerRows()}\n            </Table.Body>\n          </Table>}\n          <Button primary onClick={() => fetchServerData()}>Refresh</Button>\n        </React.Fragment>\n        \n      }\n      {loading && \n        <Dimmer active>\n        <Loader inverted>Loading</Loader>\n      </Dimmer>\n      }\n      {/* <iframe src=\"https://discord.com/widget?id=827686879188877334&theme=dark\" width=\"350\" height=\"500\" allowtransparency=\"true\" frameborder=\"0\" sandbox=\"allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts\"></iframe> */}\n\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}